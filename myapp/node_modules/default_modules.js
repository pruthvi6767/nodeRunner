const path = require('path')
const os = require('os')
const htp = require('http')
const fp = require('fs')


var file = path.parse('../app.js')
console.log(file)

var memory_free = os.freemem()
var total_memory = os.totalmem()
var x

var k = htp.createServer( (req, res) => {
    // req is an http.IncomingMessage, which is a Readable Stream
    // res is an http.ServerResponse, which is a Writable Stream
  
    let body = '';
    // Get the data as utf8 strings.
    // If an encoding is not set, Buffer objects will be received.
    req.setEncoding('utf8');
  
    // Readable streams emit 'data' events once a listener is added
    req.on('data', (chunk) => {
      body += chunk;
    });
  
    // the 'end' event indicates that the entire body has been received
    req.on('end', () => {
      try {
        const data = JSON.parse(body);
        // write back something interesting to the user:
        res.write(typeof data);
        res.end();
      } catch (er) {
        // uh oh! bad json!
        res.statusCode = 400;
        return res.end(`error: ${er.message}`);
      }
    });
  });
k.listen(8080)
console.log(memory_free +' '+ total_memory);
//Template String ==> builds string with out concatenations
//ES6 /ES2015 : ECMAScript 6

console.log(`TotalMemeory: ${total_memory} ; Free Memory: ${memory_free}`);


var files = fp.readdirSync('./') //sysnc
console.log(files)
//Async
var files_async = fp.readdir('./', (err,files) =>{

    if (err) console.log(err); //puts null -==> is assigned  a value null
    else console.log(files) // null vs undefined ==> not initialed just declared
},)